{"version":3,"sources":["frontend_files/utils.js","frontend_files/ColouredIcon.js","frontend_files/AnalysedTweet.js","frontend_files/main.js","App.js","reportWebVitals.js","index.js"],"names":["getTweetData","twitterHandle","pagination","a","twitterUsernameRegex","controller","AbortController","match","Error","fetch","signal","response","json","ok","error","message","parseAnalyzedData","analyzedData","arrayWithTrue","console","log","data","l","label","push","length","e","ColoredIcon","props","Provider","value","color","size","AnalysedTweet","Card","bg","text","className","Header","Title","errorMessage","id","Body","ListGroup","Item","identity_attack","insult","obscene","severe_toxicity","sexual_explicit","threat","toxicity","Button","href","username","Home","state","analysedData","twitterHandleInput","isLoading","showAllTweets","fetchData","bind","onChangeQueryValue","onChangePaginationValue","this","setState","tweetData","target","tweets","Array","isArray","tweet","cardTweet","errorTweet","Container","Row","Col","onChange","type","name","defaultChecked","InputGroup","Text","FormControl","placeholder","event","variant","disabled","onClick","xs","map","idx","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uWAAO,SAAeA,EAAtB,oC,4CAAO,WAA4BC,EAAeC,GAA3C,qBAAAC,EAAA,yDACGC,EAAuB,qBACzBC,EAAa,IAAIC,gBAFlB,SAKOL,EAAcM,MAAMH,GAL3B,sBAMW,IAAII,MAAM,oBANrB,uBAUwBC,MAAK,gFAEiDR,EAFjD,uBAE6EC,GACrG,CACIQ,OAAQL,EAAWK,SAd5B,cAUOC,EAVP,iBAmBoBA,EAASC,OAnB7B,WAmBOA,EAnBP,OAqBOD,EAASE,GArBhB,uBAsBW,IAAIL,MAAMI,EAAKE,OAtB1B,iCAwBQF,GAxBR,2DA4BQ,KAAMG,SA5Bd,2D,sBAuCA,SAASC,EAAkBC,GAC9B,IAAIC,EAAgB,GACpBC,QAAQC,IAAIH,GAFgC,oBAGzBA,GAHyB,IAG5C,2BAAiC,CAAC,IAAvBI,EAAsB,QAC7B,IAAK,IAAMC,KAAKD,EAAKE,MACjB,GAAIF,EAAKE,MAAMD,GAAI,CACfJ,EAAcM,KAAKH,GACnB,QAPgC,8BAY5C,IACI,KAAMH,EAAcO,OAAS,GACzB,MAAM,IAAIjB,MAAM,8BAGpB,OADAW,QAAQC,IAAIF,GACLA,EAEX,MAAOQ,GACH,OAAOA,EAAEX,S,kCCtDF,SAASY,EAAYC,GAEhC,OACI,mCACI,cAAC,IAAYC,SAAb,CAAsBC,MAAO,CAAEC,MAAOH,EAAMG,MAAOC,KAAM,IAAzD,SACI,cAAC,IAAD,Q,YCLD,SAASC,EAAcL,GAElC,OAAMA,EAAMd,MA8BJ,mCACI,eAACoB,EAAA,EAAD,CACIC,GAAG,SACHC,KAAK,QACLC,UAAU,cAHd,UAKI,cAACH,EAAA,EAAKI,OAAN,oBACA,cAACJ,EAAA,EAAKK,MAAN,UAAaX,EAAMY,oBAnC3B,mCACI,eAACN,EAAA,EAAD,CAGIG,UAAU,cAHd,UAKI,cAACH,EAAA,EAAKK,MAAN,6BACA,cAACL,EAAA,EAAKK,MAAN,UACI,sBAAME,GAAG,SAAT,SAAmBb,EAAMQ,KAAO,OAEpC,eAACF,EAAA,EAAKQ,KAAN,WACI,eAACC,EAAA,EAAD,WACI,cAACA,EAAA,EAAUC,KAAX,UAAgB,qDAAwBhB,EAAML,MAAMsB,gBAAkB,cAAClB,EAAD,CAAaI,MAAM,QAAW,UACpG,cAACY,EAAA,EAAUC,KAAX,UAAgB,4CAAehB,EAAML,MAAMuB,OAAS,cAACnB,EAAD,CAAaI,MAAM,QAAW,UAClF,cAACY,EAAA,EAAUC,KAAX,UAAgB,6CAAgBhB,EAAML,MAAMwB,QAAU,cAACpB,EAAD,CAAaI,MAAM,QAAW,UACpF,cAACY,EAAA,EAAUC,KAAX,UAAgB,qDAAwBhB,EAAML,MAAMyB,gBAAkB,cAACrB,EAAD,CAAaI,MAAM,QAAW,UACpG,cAACY,EAAA,EAAUC,KAAX,UAAgB,qDAAwBhB,EAAML,MAAM0B,gBAAkB,cAACtB,EAAD,CAAaI,MAAM,QAAW,UACpG,cAACY,EAAA,EAAUC,KAAX,UAAgB,4CAAehB,EAAML,MAAM2B,OAAS,cAACvB,EAAD,CAAaI,MAAM,QAAW,UAClF,cAACY,EAAA,EAAUC,KAAX,UAAgB,8CAAiBhB,EAAML,MAAM4B,SAAW,cAACxB,EAAD,CAAaI,MAAM,QAAW,aAE1F,cAACqB,EAAA,EAAD,CAAQC,KAAM,uBAAyBzB,EAAM0B,SAAW,WAAa1B,EAAMa,GAA3E,mC,UCfHc,E,kDACjB,WAAY3B,GAAQ,IAAD,8BACf,cAAMA,IACD4B,MAAQ,CACTC,aAAc,GACdC,mBAAoB,GACpBC,WAAW,EACXC,eAAe,EACf1D,WAAY,GAEhB,EAAK2D,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,mBAAqB,EAAKA,mBAAmBD,KAAxB,gBAC1B,EAAKE,wBAA0B,EAAKA,wBAAwBF,KAA7B,gBAXhB,E,oFAenB,WAAgB7D,EAAe2D,EAAe1D,GAA9C,eAAAC,EAAA,sEAEQ8D,KAAKC,SAAS,CAAEP,WAAW,IAFnC,SAG8B3D,EAAaC,EAAeC,GAH1D,UAKiC,kBAFrBiE,EAHZ,8BAMYF,KAAKC,SAAS,CAAET,aAAcU,IACxB,IAAI3D,MAAM2D,GAP5B,UAUcP,EAVd,oBAYqC,kBADzBO,EAAYnD,EAAkBmD,IAX1C,uBAagBF,KAAKC,SAAS,CAAET,aAAcU,IACxB,IAAI3D,MAAM2D,GAdhC,QAkBQF,KAAKC,SAAS,CAAET,aAAcU,IAlBtC,0DAwBIF,KAAKC,SAAS,CAAEP,WAAW,IAxB/B,0D,2FA4BA,SAAmBjC,GACQ,QAAnBA,EAAE0C,OAAOtC,MACTmC,KAAKC,SAAS,CAAEN,eAAe,IAG/BK,KAAKC,SAAS,CAAEN,eAAe,M,qCAKvC,SAAwBlC,GAEG,kBAAnBA,EAAE0C,OAAOtC,MACTmC,KAAKC,SAAS,CAAEhE,WAAY,IAG5B+D,KAAKC,SAAS,CAAEhE,WAAY,M,oBAKpC,WAAU,IAAD,OACDmE,EAAS,GACb,GAAIC,MAAMC,QAAQN,KAAKT,MAAMC,eAAiBQ,KAAKT,MAAMC,aAAahC,OAAS,EAAG,CAC9E4C,EAAS,GADqE,oBAE1DJ,KAAKT,MAAMC,cAF+C,IAE9E,2BAA6C,CAAC,IAAnCe,EAAkC,QAErCC,EAAY,cAACxC,EAAD,CAAeG,KAAMoC,EAAMpC,KAAMb,MAAOiD,EAAMjD,MAAOkB,GAAI+B,EAAM/B,GAAIa,SAAUW,KAAKT,MAAME,qBAExGW,EAAO7C,KAAKiD,IAN8D,oCAU7E,GAAuC,kBAA5BR,KAAKT,MAAMC,aAA2B,CAClDY,EAAS,GACT,IAAIK,EAAa,cAACzC,EAAD,CAAenB,OAAO,EAAM0B,aAAcyB,KAAKT,MAAMC,eACtEY,EAAO7C,KAAKkD,GAIhB,OACI,mCACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UACI,qBAAKvC,UAAU,eAAf,SACI,sBAAKA,UAAU,YAAf,UACI,8BACI,4CAAc,mBAAGgB,KAAK,qDAAR,uCAElB,8BACI,4CAAc,mBAAGA,KAAK,2DAAR,+CAM9B,cAACuB,EAAA,EAAD,UACI,iEAEJ,eAACA,EAAA,EAAD,WACI,sDACA,cAACjD,EAAD,CAAaI,MAAM,WAGvB,cAAC6C,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,qBAAKC,SAAUb,KAAKF,mBAAoB1B,UAAU,eAAlD,SACI,sBAAKA,UAAU,YAAf,UACI,gCACI,uBAAO0C,KAAK,QAAQjD,MAAM,UAAUkD,KAAK,gBAAgBC,gBAAc,IAD3E,0BAGA,gCACI,uBAAOF,KAAK,QAAQjD,MAAM,MAAMkD,KAAK,kBADzC,0BAOhB,eAACJ,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,IACA,cAACA,EAAA,EAAD,UACI,yBAEJ,cAACA,EAAA,EAAD,OAGJ,cAACD,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,qBAAKC,SAAUb,KAAKD,wBAAyB3B,UAAU,eAAvD,SACI,sBAAKA,UAAU,YAAf,UACI,gCACI,uBAAO0C,KAAK,QAAQjD,MAAM,eAAekD,KAAK,aAAaC,gBAAc,IAD7E,6BAGA,gCACI,uBAAOF,KAAK,QAAQjD,MAAM,gBAAgBkD,KAAK,eADnD,8CAQhB,eAACJ,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,IACA,cAACA,EAAA,EAAD,UACI,eAACK,EAAA,EAAD,WACI,cAACA,EAAA,EAAWC,KAAZ,gBACA,cAACC,EAAA,EAAD,CACIL,KAAK,OACLM,YAAY,iBACZ,aAAW,iBACXrD,KAAK,KAEL8C,SAAU,SAACQ,GAAY,EAAKpB,SAAS,CAAER,mBAAoB4B,EAAMlB,OAAOtC,gBAIpF,cAAC+C,EAAA,EAAD,OAGJ,cAACzB,EAAA,EAAD,CAAQmC,QAAQ,UAAUC,SAAUvB,KAAKT,MAAMG,UAAW7B,MAAOmC,KAAKT,MAAME,mBAAoB+B,QAAS,SAAC/D,GAAQ,EAAKmC,UAAUnC,EAAE0C,OAAOtC,MAAO,EAAK0B,MAAMI,cAAe,EAAKJ,MAAMtD,aAAtL,SAAwM+D,KAAKT,MAAMG,UAAZ,oBAAsCM,KAAKT,MAAME,mBAAjD,kBAAsF,kBAA0B,IAEvT,eAACkB,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAKa,GAAI,IACT,cAACb,EAAA,EAAD,CAAKa,GAAI,EAAT,SACKrB,EAAOsB,KAAI,SAACnB,EAAOoB,GAAR,OACR,+BAAiBpB,GAANoB,QAGnB,cAACf,EAAA,EAAD,CAAKa,GAAI,gB,GA5KCG,a,MCHnBC,MARf,WACE,OACE,qBAAKzD,UAAU,MAAf,SACE,cAAC,EAAD,OCMS0D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,YCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bd1a1ded.chunk.js","sourcesContent":["export async function getTweetData(twitterHandle, pagination) {\r\n    const twitterUsernameRegex = /^[a-z0-9_]{4,15}$/i;\r\n    let controller = new AbortController();\r\n\r\n    try {\r\n        if (!(twitterHandle.match(twitterUsernameRegex))) {\r\n            throw new Error(\"Invalid Username\");\r\n        }\r\n\r\n        //setTimeout(() => controller.abort(), 300000);\r\n        const response = await fetch(\r\n            //`http://localhost:59000/search_tweets?twitter_handle=${twitterHandle}&pagination=${pagination}`,\r\n            `https://tweet-toxicity-api.herokuapp.com/search_tweets?twitter_handle=${twitterHandle}&pagination=${pagination}`,\r\n            {\r\n                signal: controller.signal\r\n            }\r\n        );\r\n\r\n\r\n        const json = await response.json();\r\n\r\n        if (!(response.ok)) {\r\n            throw new Error(json.error);\r\n        }\r\n        return json;\r\n\r\n    } catch (error) {\r\n        //console.error(error);\r\n        return error.message;\r\n    }\r\n}\r\n\r\n/*\r\n{\r\n    id:number\r\n    label:object with bools\r\n    text:string\r\n}\r\n*/\r\nexport function parseAnalyzedData(analyzedData) {\r\n    let arrayWithTrue = [];\r\n    console.log(analyzedData);\r\n    for (const data of analyzedData) {\r\n        for (const l in data.label) {\r\n            if (data.label[l]) {\r\n                arrayWithTrue.push(data);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    try {\r\n        if (!(arrayWithTrue.length > 0)) {\r\n            throw new Error(\"User has no flagged tweets\");\r\n        }\r\n        console.log(arrayWithTrue)\r\n        return arrayWithTrue;\r\n    }\r\n    catch (e) {\r\n        return e.message;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { BsFillExclamationTriangleFill } from \"react-icons/bs\";\r\nimport { IconContext } from \"react-icons\";\r\n\r\n\r\nexport default function ColoredIcon(props) {\r\n\r\n    return (\r\n        <>\r\n            <IconContext.Provider value={{ color: props.color, size: 20 }}>\r\n                <BsFillExclamationTriangleFill />\r\n            </IconContext.Provider>\r\n        </>\r\n    );\r\n}","import Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ColoredIcon from './ColouredIcon.js';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\n\r\nexport default function AnalysedTweet(props) {\r\n\r\n    if (!(props.error)) {\r\n        return (\r\n            <>\r\n                <Card\r\n                    //bg=\"dark\"\r\n                    //text=\"white\"\r\n                    className=\"text-center\"\r\n                >\r\n                    <Card.Title>Analysed Tweet</Card.Title>\r\n                    <Card.Title>\r\n                        <span id=\"tweets\">{props.text + ''}</span>\r\n                    </Card.Title>\r\n                    <Card.Body>\r\n                        <ListGroup>\r\n                            <ListGroup.Item><span>Identity Attack: {props.label.identity_attack ? <ColoredIcon color=\"red\" /> : null}</span></ListGroup.Item>\r\n                            <ListGroup.Item><span>Insult: {props.label.insult ? <ColoredIcon color=\"red\" /> : null}</span></ListGroup.Item>\r\n                            <ListGroup.Item><span>Obscene: {props.label.obscene ? <ColoredIcon color=\"red\" /> : null}</span></ListGroup.Item>\r\n                            <ListGroup.Item><span>Severe Toxicity: {props.label.severe_toxicity ? <ColoredIcon color=\"red\" /> : null}</span></ListGroup.Item>\r\n                            <ListGroup.Item><span>Sexual Explicit: {props.label.sexual_explicit ? <ColoredIcon color=\"red\" /> : null}</span></ListGroup.Item>\r\n                            <ListGroup.Item><span>Threat: {props.label.threat ? <ColoredIcon color=\"red\" /> : null}</span></ListGroup.Item>\r\n                            <ListGroup.Item><span>Toxicity: {props.label.toxicity ? <ColoredIcon color=\"red\" /> : null}</span></ListGroup.Item>\r\n                        </ListGroup>\r\n                        <Button href={\"https://twitter.com/\" + props.username + \"/status/\" + props.id}>Link to tweet</Button>\r\n                    </Card.Body>\r\n                </Card>\r\n            </>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <>\r\n                <Card\r\n                    bg=\"danger\"\r\n                    text=\"white\"\r\n                    className=\"text-center\"\r\n                >\r\n                    <Card.Header>Error</Card.Header>\r\n                    <Card.Title>{props.errorMessage}</Card.Title>\r\n                </Card>\r\n            </>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { getTweetData, parseAnalyzedData } from './utils.js';\r\nimport AnalysedTweet from './AnalysedTweet.js';\r\nimport ColoredIcon from './ColouredIcon.js';\r\nimport './styles.css';\r\n\r\n\r\n\r\nexport default class Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            analysedData: [],\r\n            twitterHandleInput: \"\",\r\n            isLoading: false,\r\n            showAllTweets: false,\r\n            pagination: 0\r\n        };\r\n        this.fetchData = this.fetchData.bind(this);\r\n        this.onChangeQueryValue = this.onChangeQueryValue.bind(this);\r\n        this.onChangePaginationValue = this.onChangePaginationValue.bind(this);\r\n\r\n    }\r\n\r\n    async fetchData(twitterHandle, showAllTweets, pagination) {\r\n        try {\r\n            this.setState({ isLoading: true });\r\n            let tweetData = await getTweetData(twitterHandle, pagination);\r\n\r\n            if (typeof tweetData === \"string\") {\r\n                this.setState({ analysedData: tweetData });\r\n                throw new Error(tweetData);\r\n            }\r\n\r\n            if (!(showAllTweets)) {\r\n                tweetData = parseAnalyzedData(tweetData);\r\n                if (typeof tweetData === \"string\") {\r\n                    this.setState({ analysedData: tweetData });\r\n                    throw new Error(tweetData);\r\n                }\r\n            }\r\n\r\n            this.setState({ analysedData: tweetData });\r\n        }\r\n        catch (error) {\r\n            //console.error(`Error: ${error}`);\r\n            //this.setState({ analysedData: error });\r\n        }\r\n        this.setState({ isLoading: false });\r\n    }\r\n\r\n\r\n    onChangeQueryValue(e) {\r\n        if (e.target.value === \"all\") {\r\n            this.setState({ showAllTweets: true });\r\n        }\r\n        else {\r\n            this.setState({ showAllTweets: false });\r\n        }\r\n\r\n    }\r\n\r\n    onChangePaginationValue(e) {\r\n\r\n        if (e.target.value === \"yesPagination\") {\r\n            this.setState({ pagination: 1 });\r\n        }\r\n        else {\r\n            this.setState({ pagination: 0 });\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        let tweets = [];\r\n        if (Array.isArray(this.state.analysedData) && this.state.analysedData.length > 0) {\r\n            tweets = [];\r\n            for (const tweet of this.state.analysedData) {\r\n\r\n                let cardTweet = <AnalysedTweet text={tweet.text} label={tweet.label} id={tweet.id} username={this.state.twitterHandleInput}></AnalysedTweet>\r\n\r\n                tweets.push(cardTweet);\r\n            }\r\n\r\n        }\r\n        else if (typeof this.state.analysedData === \"string\") {\r\n            tweets = [];\r\n            let errorTweet = <AnalysedTweet error={true} errorMessage={this.state.analysedData}></AnalysedTweet>\r\n            tweets.push(errorTweet);\r\n\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <Container>\r\n                    <Row>\r\n                        <div className=\"containerDiv\">\r\n                            <div className=\"leftAlign\">\r\n                                <div>\r\n                                    <span>Link to <a href=\"https://www.github.com/Davage-M/Tweet-Toxicity-API\">back end github repo</a></span>\r\n                                </div>\r\n                                <div>\r\n                                    <span>Link to <a href=\"https://www.github.com/Davage-M/Tweet-Toxicity-Front-End\">front end github repo</a></span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <h1>Tweet Toxicity Analyzer (AAA)</h1>\r\n                    </Row>\r\n                    <Row>\r\n                        <h4>Enter Twitter Handle</h4>\r\n                        <ColoredIcon color=\"red\" />\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col>\r\n                            <div onChange={this.onChangeQueryValue} className=\"containerDiv\">\r\n                                <div className=\"leftAlign\">\r\n                                    <div>\r\n                                        <input type=\"radio\" value=\"flagged\" name=\"displayTweets\" defaultChecked /> Only Flagged Tweets\r\n                                    </div>\r\n                                    <div>\r\n                                        <input type=\"radio\" value=\"all\" name=\"displayTweets\" /> All Tweets\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col></Col>\r\n                        <Col>\r\n                            <hr />\r\n                        </Col>\r\n                        <Col></Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col>\r\n                            <div onChange={this.onChangePaginationValue} className=\"containerDiv\">\r\n                                <div className=\"leftAlign\">\r\n                                    <div>\r\n                                        <input type=\"radio\" value=\"noPagination\" name=\"pagination\" defaultChecked /> Most recent 100 tweets\r\n                                    </div>\r\n                                    <div>\r\n                                        <input type=\"radio\" value=\"yesPagination\" name=\"pagination\" /> Most recent 3200 tweets (long)\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col></Col>\r\n                        <Col>\r\n                            <InputGroup>\r\n                                <InputGroup.Text>@</InputGroup.Text>\r\n                                <FormControl\r\n                                    type=\"text\"\r\n                                    placeholder=\"Twitter Handle\"\r\n                                    aria-label=\"Twitter Handle\"\r\n                                    size=\"lg\"\r\n                                    //readOnly={false}\r\n                                    onChange={(event) => { this.setState({ twitterHandleInput: event.target.value }); }}\r\n                                />\r\n                            </InputGroup>\r\n                        </Col>\r\n                        <Col></Col>\r\n                    </Row>\r\n\r\n                    <Button variant=\"primary\" disabled={this.state.isLoading} value={this.state.twitterHandleInput} onClick={(e) => { this.fetchData(e.target.value, this.state.showAllTweets, this.state.pagination); }}>{(this.state.isLoading) ? `Searching ${this.state.twitterHandleInput}'s tweets.....` : \"Search Tweets\"}</Button>{' '}\r\n\r\n                    <Row>\r\n                        <Col xs={4}></Col>\r\n                        <Col xs={4}>\r\n                            {tweets.map((tweet, idx) => (\r\n                                <span key={idx}>{tweet}</span>\r\n                            ))}\r\n                        </Col>\r\n                        <Col xs={4}></Col>\r\n                    </Row>\r\n                </Container >\r\n            </>\r\n        );\r\n    }\r\n}","import Home from './frontend_files/main.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}